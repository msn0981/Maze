from queue import *
from array import array


class MickeyMove():
    def __init__(self, map,x_start , y_start):
        print("create mickey maze")
        self.x_start = x_start
        self.y_start = y_start
        self.path = Queue(maxsize=0)
        self.maze_map = map
    
    @classmethod
    def checkMove(self, x_nextPos, y_nextPos):
        maze = self.maze_map
        if maze[x_nextPos+1][y_nextPos] == 0 or maze[x_nextPos-1][y_nextPos] == 0 or maze[x_nextPos][y_nextPos+1] == 0:
            return True
        else:
            return False
        
    @classmethod    
    def getMaze(self,val):
        self.maze_map = val
    @classmethod
    def getPath(self):
        self.path = Queue(maxsize = 0)
        
    @classmethod
    def move(self, x_move, y_move):
        maze = self.maze_map
        path = self.getPath()
        print("\n")
        i = x_move
        j = y_move
        maze[i][j] = 1
        if self.checkMove(i,j) == True:

        elif self.checkMove(i,j) == False:



               
    @classmethod
    def recStep(self,i,j):
        array = []
        array.append((i,j,self.checkMove(i,j)))
        self.path.put(array)
        #print(array)
        
    def setMaze(self,maze):
        self.maze_map = maze
        
    @classmethod
    def random(self,a):
        import random
        return random.randint(0,a)
        
    @classmethod
    def printMaze(self, maze_map):
        print("in maze")
        for row in maze_map:
            for val in row:
                print(val,end=" ")
            print(end="\n")

    

def main():
    maze =[
           [2, 2, 2, 2, 2, 2, 2],
           [2, 0, 0, 0, 0, 0, 2],
           [2, 0, 2, 0, 2, 0, 2],
           [2, 0, 0, 0, 0, 2, 2],
           [2, 2, 0, 2, 0, 2, 2],
           [2, 0, 0, 0, 0, 0, 0],
           [2, 2, 2, 2, 2, 2, 2]]

    m = MickeyMove(maze, 1,1)
    #print(m.maze_map)
    #m.printMaze(m.maze_map)
    m.getMaze(maze)
    m.move(1,1)
                
    
if __name__ == "__main__":
    main()
