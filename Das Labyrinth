from queue import *
from array import array


class MickeyMove():
    def __init__(self, map,x_start , y_start):
        print("create mickey maze")
        self.x_start = x_start
        self.y_start = y_start
        self.path = Queue(maxsize=0)
        self.maze_map = map
    
    @classmethod
    def checkMove(self, x_nextPos, y_nextPos):
        maze = self.maze_map
        if maze[x_nextPos+1][y_nextPos] == 0 or maze[x_nextPos-1][y_nextPos] == 0 or maze[x_nextPos][y_nextPos+1] == 0:
            return True
        else:
            return False
        
    @classmethod    
    def getMaze(self,val):
        self.maze_map = val
    @classmethod
    def getPath(self):
        self.path = Queue(maxsize = 0)
        
    @classmethod
    def move(self, x_move, y_move):
        maze = self.maze_map
        path = self.getPath()
        print("\n")
        i = x_move
        j = y_move
        maze[i][j] = 1
        if self.checkMove(i,j) == True:
            #4 ways
            if maze[i+1][j] == 0 and maze[i-1][j] == 0 and maze[i][j+1] == 0 and maze[i][j-1] == 0:
                ways = []
                ways.insert(0,(i+1,j))
                ways.insert(1,(i-1,j))
                ways.insert(2,(i,j+1))
                ways.insert(2,(i,j-1))
                nexM = ways[self.random(3)]
                #print(nexM)
                self.path.put(nexM)
                self.move(nexM[0],nexM[1])
            #3 ways
            elif maze[i+1][j] == 0 and maze[i-1][j] == 0 and maze[i][j+1] == 0 and maze[i][j-1] == 2:
                ways = []
                ways.insert(0,(i+1,j))
                ways.insert(1,(i-1,j))
                ways.insert(2,(i,j+1))
                nexM = ways[self.random(2)]
                #print(nexM)
                self.path.put(nexM)
                self.move(nexM[0],nexM[1])
            elif maze[i+1][j] == 2 and maze[i-1][j] == 0 and maze[i][j+1] == 0 and maze[i][j-1] == 0:
                ways = []
                ways.insert(0,(i-1,j))
                ways.insert(1,(i,j+1))
                ways.insert(2,(i,j-1))
                nexM = ways[self.random(2)]
                #print(nexM)
                self.path.put(nexM)
                self.move(nexM[0],nexM[1])
            elif maze[i+1][j] == 0 and maze[i-1][j] == 0 and maze[i][j+1] == 2 and maze[i][j-1] == 0:
                ways = []
                ways.insert(0,(i+1,j))
                ways.insert(1,(i-1,j))
                ways.insert(2,(i,j-1))
                nexM = ways[self.random(2)]
                #print(nexM)
                self.path.put(nexM)
                self.move(nexM[0],nexM[1])
            elif maze[i+1][j] == 0 and maze[i-1][j] == 2 and maze[i][j+1] == 0 and maze[i][j+1] == 0:
                ways = []
                ways.insert(0,(i+1,j))
                ways.insert(1,(i,j+1))
                ways.insert(2,(i,j-1))
                nexM = ways[self.random(2)]
                print(nexM)
                self.path.put(nexM)
                print(self.move(nexM[0],nexM[1]))
                self.move(nexM[0],nexM[1])
            # 2 ways             
            elif maze[i+1][j] == 2 and maze[i-1][j] == 0 and maze[i][j+1] == 0 and maze[i][j-1] == 2:
                ways = []
                ways.insert(0,(i-1,j))
                ways.insert(1,(i,j+1))
                nexM = ways[self.random(1)]
                #print(nexM)
                self.path.put(nexM)
                self.move(nexM[0],nexM[1])
            elif maze[i+1][j] == 0 and maze[i-1][j] == 2 and maze[i][j+1] == 0 and maze[i][j-1] == 2:
                ways = []
                ways.insert(0,(i+1,j))
                ways.insert(1,(i,j+1))
                nexM = ways[self.random(1)]
                #print(nexM)
                self.path.put(nexM)
                self.move(nexM[0],nexM[1])
            elif maze[i+1][j] == 0 and maze[i-1][j] == 2 and maze[i][j+1] == 2 and maze[i][j-1] == 0:
                ways = []
                ways.insert(0,(i+1,j))
                ways.insert(1,(i,j-1))
                nexM = ways[self.random(1)]
                #print(nexM)
                self.path.put(nexM)
                self.move(nexM[0],nexM[1])
            elif maze[i+1][j] == 2 and maze[i-1][j] == 0 and maze[i][j+1] == 2 and maze[i][j-1] == 0:
                ways = []
                ways.insert(0,(i-1,j))
                ways.insert(1,(i,j-1))
                nexM = ways[self.random(1)]
                #print(nexM)
                self.path.put(nexM)
                self.move(nexM[0],nexM[1])
            elif maze[i+1][j] == 2 and maze[i-1][j] == 2 and maze[i][j+1] == 0 and maze[i][j-1] == 0:
                ways = []
                ways.insert(0,(i,j+1))
                ways.insert(1,(i,j-1))
                nexM = ways[self.random(1)]
                #print(nexM)
                self.path.put(nexM)
                self.move(nexM[0],nexM[1])
            elif maze[i+1][j] == 0 and maze[i-1][j] == 0 and maze[i][j+1] == 2 and maze[i][j-1] == 2:
                ways = []
                ways.insert(0,(i+1,j))
                ways.insert(1,(i-1,j))
                nexM = ways[self.random(1)]
                #print(nexM)
                self.path.put(nexM)
                self.move(nexM[0],nexM[1])
            # 1 way
            elif maze[i+1][j] == 2 and maze[i-1][j] == 0 and maze[i][j+1] == 2 and maze[i][j-1] == 2:
                self.path.put(i-1,j)
                self.move(i-1,j)
            elif maze[i+1][j] == 0 and maze[i-1][j] == 2 and maze[i][j+1] == 2 and maze[i][j-1] == 2:
                self.path.put(i+1,j)
                self.move(i+1,j)
            elif maze[i+1][j] == 2 and maze[i-1][j] == 2 and maze[i][j+1] == 0 and maze[i][j-1] == 2:
                self.path.put(i,j+1)
                self.move(i,j+1)
            elif maze[i+1][j] == 2 and maze[i-1][j] == 2 and maze[i][j+1] == 2 and maze[i][j-1] == 0:
                self.path.put(i,j-1)
                self.move(i,j-1)
        elif self.checkMove(i,j) == False:
            #if maze[i+1][j] == 2 and maze[i-1][j] == 2 and maze[i][j+1] == 2:
            self.move(self.path.get())
            self.path.popleft(self.checkMove(i,j))
        elif ((maze[i+1][j] == 2 and maze[i-1][j] == 2 and (maze[6][j] == 0 or maze[0][j] == 0)) or ((maze[i][j+1] == 2 and maze[i][j-1] == 2 and (maze[i][6] == 0 or maze[i][0] == 0)))):
            print("congrat!")
        for i in range(0,7):
            for j in range(0,7):
                if maze[i][j] == 1:
                    print("✚",end='')
                elif maze[i][j] ==2:
                    print("☐",end='')
                else:
                    print("　",end='')
            print("\n")


               

    def setMaze(self,maze):
        self.maze_map = maze
        
    @classmethod
    def random(self,a):
        import random
        return random.randint(0,a)
        
    @classmethod
    def printMaze(self, maze_map):
        print("in maze")
        for row in maze_map:
            for val in row:
                print(val,end=" ")
            print(end="\n")

    

def main():
    maze =[
           [2, 2, 2, 2, 2, 2, 2],
           [2, 0, 0, 0, 0, 0, 2],
           [2, 0, 2, 0, 2, 0, 2],
           [2, 0, 0, 0, 0, 2, 2],
           [2, 2, 0, 2, 0, 2, 2],
           [2, 0, 0, 0, 0, 0, 0],
           [2, 2, 2, 2, 2, 2, 2]]

    m = MickeyMove(maze, 1,1)
    #print(m.maze_map)
    #m.printMaze(m.maze_map)
    m.getMaze(maze)
    m.move(1,1)
                
    
if __name__ == "__main__":
    main()
