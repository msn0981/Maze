from queue import *
from array import array


class MickeyMove():
    def __init__(self, map,x_start , y_start):
        print("create mickey maze")
        self.x_start = x_start
        self.y_start = y_start
        self.path = Queue(maxsize=0)
        self.maze_map = map
    
    @classmethod
    def checkMove(self, x_nextPos, y_nextPos):
        maze = self.maze_map
        if maze[x_nextPos+1][y_nextPos] == 0 or maze[x_nextPos-1][y_nextPos] == 0 or maze[x_nextPos][y_nextPos+1] == 0:
            return True
        else:
            return False
    
    @classmethod
    def checkFork(self,x_fork,y_fork):
        maze = self.maze_map
        if maze[x_fork][y_fork] == 0:
            return True
        elif maze[x_fork][y_fork] == 2:
            self.choose(x_fork,y_fork)
            
        
    @classmethod    
    def getMaze(self,val):
        self.maze_map = val
    
    @classmethod
    def getPath(self):
        self.path = Queue(maxsize = 0)
        
    @classmethod
    def move(self, x_move, y_move):
        maze = self.maze_map
        self.recStep(x_move,y_move)
        go = self.choose(x_move,y_move)
        self.move(go[0],go[1])
    
    @classmethod
    def choose(self,x_fork,y_fork):
        maze = self.maze_map
        ran = list(range(4))
        ran[0] = (x_fork+1 , y_fork)
        ran[1] = (x_fork-1 , y_fork)
        ran[2] = (x_fork , y_fork+1)
        ran[3] = (x_fork , y_fork-1)
        nexMove = self.random(ran)
        if self.checkFork(nexMove[0],nexMove[1]) == True:
            self.recStep(nexMove[0],nexMove[1])
            return (nexMove[0],nexMove[1])          
        else:
            self.choose(x_fork,y_fork)

    @classmethod
    def recStep(self,x_recstep,y_recstep):
        array = []
        if self.checkMove(x_recstep,y_recstep) == True:
            fork = True
        else:
            fork = False
        array.append((x_recstep,y_recstep,self.checkMove(x_recstep,y_recstep),fork))
        path.put(array)
    
    @classmethod
    def choose(self,x_fork,y_fork):
        ran = list(range(4))
        ran[0] = (x_fork+1 , y_fork)
        ran[1] = (x_fork-1 , y_fork)
        ran[2] = (x_fork , y_fork+1)
        ran[3] = (x_fork , y_fork-1)
        nexMove = self.random(ran)
        if nexMove[0] >= 0 and nexMove[1] >= 0:
            if self.checkFork(nexMove[0],nexMove[1]) == True:
                return (nexMove[0],nexMove[1])
            else:
                self.choose(x_fork,y_fork)
        else:
            self.choose(x_fork,y_fork)
        
    def setMaze(self,maze):
        self.maze_map = maze
        
    @classmethod
    def random(self,a):
        from random import choice
        return choice(a)
        
    @classmethod
    def printMaze(self, maze_map):
        print("in maze")
        for row in maze_map:
            for val in row:
                print(val,end=" ")
            print(end="\n")

    

def main():
    maze =[
           [2, 2, 2, 2, 2, 2, 2],
           [2, 0, 0, 0, 0, 0, 2],
           [2, 0, 2, 0, 2, 0, 2],
           [2, 0, 0, 0, 0, 2, 2],
           [2, 2, 0, 2, 0, 2, 2],
           [2, 0, 0, 0, 0, 0, 0],
           [2, 2, 2, 2, 2, 2, 2]]

    m = MickeyMove(maze, 1,1)
    #print(m.maze_map)
    #m.printMaze(m.maze_map)
    #m.getMaze(maze)
    #m.move(1,1)
        if m.checkMove(Sx,Sy) == True:
        m.move(Sx,Sy)
    else:
        back = path.get()
        while back[3] == True:
            return back[3]
             
    
if __name__ == "__main__":
    Sx = 1
    Sy = 1
    main()
